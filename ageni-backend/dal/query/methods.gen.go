// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/readonme/open-studio/dal/model"
)

func newMethod(db *gorm.DB, opts ...gen.DOOption) method {
	_method := method{}

	_method.methodDo.UseDB(db, opts...)
	_method.methodDo.UseModel(&model.Method{})

	tableName := _method.methodDo.TableName()
	_method.ALL = field.NewAsterisk(tableName)
	_method.ID = field.NewInt64(tableName, "id")
	_method.PluginID = field.NewInt64(tableName, "plugin_id")
	_method.Name = field.NewString(tableName, "name")
	_method.Description = field.NewString(tableName, "description")
	_method.HTTPSubPath = field.NewString(tableName, "http_sub_path")
	_method.HTTPMethod = field.NewString(tableName, "http_method")
	_method.ContractAddress = field.NewString(tableName, "contract_address")
	_method.ContractAbi = field.NewString(tableName, "contract_abi")
	_method.MethodCallName = field.NewString(tableName, "method_call_name")
	_method.InputSchema = field.NewString(tableName, "input_schema")
	_method.InputExample = field.NewString(tableName, "input_example")
	_method.OutputSchema = field.NewString(tableName, "output_schema")
	_method.OutputExample = field.NewString(tableName, "output_example")
	_method.Status = field.NewInt32(tableName, "status")
	_method.CreatedAt = field.NewTime(tableName, "created_at")
	_method.UpdatedAt = field.NewTime(tableName, "updated_at")

	_method.fillFieldMap()

	return _method
}

type method struct {
	methodDo methodDo

	ALL             field.Asterisk
	ID              field.Int64
	PluginID        field.Int64
	Name            field.String
	Description     field.String
	HTTPSubPath     field.String
	HTTPMethod      field.String
	ContractAddress field.String
	ContractAbi     field.String
	MethodCallName  field.String
	InputSchema     field.String
	InputExample    field.String
	OutputSchema    field.String
	OutputExample   field.String
	Status          field.Int32 // 1-publish, 2-unpublish, 3-delete
	CreatedAt       field.Time
	UpdatedAt       field.Time

	fieldMap map[string]field.Expr
}

func (m method) Table(newTableName string) *method {
	m.methodDo.UseTable(newTableName)
	return m.updateTableName(newTableName)
}

func (m method) As(alias string) *method {
	m.methodDo.DO = *(m.methodDo.As(alias).(*gen.DO))
	return m.updateTableName(alias)
}

func (m *method) updateTableName(table string) *method {
	m.ALL = field.NewAsterisk(table)
	m.ID = field.NewInt64(table, "id")
	m.PluginID = field.NewInt64(table, "plugin_id")
	m.Name = field.NewString(table, "name")
	m.Description = field.NewString(table, "description")
	m.HTTPSubPath = field.NewString(table, "http_sub_path")
	m.HTTPMethod = field.NewString(table, "http_method")
	m.ContractAddress = field.NewString(table, "contract_address")
	m.ContractAbi = field.NewString(table, "contract_abi")
	m.MethodCallName = field.NewString(table, "method_call_name")
	m.InputSchema = field.NewString(table, "input_schema")
	m.InputExample = field.NewString(table, "input_example")
	m.OutputSchema = field.NewString(table, "output_schema")
	m.OutputExample = field.NewString(table, "output_example")
	m.Status = field.NewInt32(table, "status")
	m.CreatedAt = field.NewTime(table, "created_at")
	m.UpdatedAt = field.NewTime(table, "updated_at")

	m.fillFieldMap()

	return m
}

func (m *method) WithContext(ctx context.Context) *methodDo { return m.methodDo.WithContext(ctx) }

func (m method) TableName() string { return m.methodDo.TableName() }

func (m method) Alias() string { return m.methodDo.Alias() }

func (m method) Columns(cols ...field.Expr) gen.Columns { return m.methodDo.Columns(cols...) }

func (m *method) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := m.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (m *method) fillFieldMap() {
	m.fieldMap = make(map[string]field.Expr, 16)
	m.fieldMap["id"] = m.ID
	m.fieldMap["plugin_id"] = m.PluginID
	m.fieldMap["name"] = m.Name
	m.fieldMap["description"] = m.Description
	m.fieldMap["http_sub_path"] = m.HTTPSubPath
	m.fieldMap["http_method"] = m.HTTPMethod
	m.fieldMap["contract_address"] = m.ContractAddress
	m.fieldMap["contract_abi"] = m.ContractAbi
	m.fieldMap["method_call_name"] = m.MethodCallName
	m.fieldMap["input_schema"] = m.InputSchema
	m.fieldMap["input_example"] = m.InputExample
	m.fieldMap["output_schema"] = m.OutputSchema
	m.fieldMap["output_example"] = m.OutputExample
	m.fieldMap["status"] = m.Status
	m.fieldMap["created_at"] = m.CreatedAt
	m.fieldMap["updated_at"] = m.UpdatedAt
}

func (m method) clone(db *gorm.DB) method {
	m.methodDo.ReplaceConnPool(db.Statement.ConnPool)
	return m
}

func (m method) replaceDB(db *gorm.DB) method {
	m.methodDo.ReplaceDB(db)
	return m
}

type methodDo struct{ gen.DO }

func (m methodDo) Debug() *methodDo {
	return m.withDO(m.DO.Debug())
}

func (m methodDo) WithContext(ctx context.Context) *methodDo {
	return m.withDO(m.DO.WithContext(ctx))
}

func (m methodDo) ReadDB() *methodDo {
	return m.Clauses(dbresolver.Read)
}

func (m methodDo) WriteDB() *methodDo {
	return m.Clauses(dbresolver.Write)
}

func (m methodDo) Session(config *gorm.Session) *methodDo {
	return m.withDO(m.DO.Session(config))
}

func (m methodDo) Clauses(conds ...clause.Expression) *methodDo {
	return m.withDO(m.DO.Clauses(conds...))
}

func (m methodDo) Returning(value interface{}, columns ...string) *methodDo {
	return m.withDO(m.DO.Returning(value, columns...))
}

func (m methodDo) Not(conds ...gen.Condition) *methodDo {
	return m.withDO(m.DO.Not(conds...))
}

func (m methodDo) Or(conds ...gen.Condition) *methodDo {
	return m.withDO(m.DO.Or(conds...))
}

func (m methodDo) Select(conds ...field.Expr) *methodDo {
	return m.withDO(m.DO.Select(conds...))
}

func (m methodDo) Where(conds ...gen.Condition) *methodDo {
	return m.withDO(m.DO.Where(conds...))
}

func (m methodDo) Order(conds ...field.Expr) *methodDo {
	return m.withDO(m.DO.Order(conds...))
}

func (m methodDo) Distinct(cols ...field.Expr) *methodDo {
	return m.withDO(m.DO.Distinct(cols...))
}

func (m methodDo) Omit(cols ...field.Expr) *methodDo {
	return m.withDO(m.DO.Omit(cols...))
}

func (m methodDo) Join(table schema.Tabler, on ...field.Expr) *methodDo {
	return m.withDO(m.DO.Join(table, on...))
}

func (m methodDo) LeftJoin(table schema.Tabler, on ...field.Expr) *methodDo {
	return m.withDO(m.DO.LeftJoin(table, on...))
}

func (m methodDo) RightJoin(table schema.Tabler, on ...field.Expr) *methodDo {
	return m.withDO(m.DO.RightJoin(table, on...))
}

func (m methodDo) Group(cols ...field.Expr) *methodDo {
	return m.withDO(m.DO.Group(cols...))
}

func (m methodDo) Having(conds ...gen.Condition) *methodDo {
	return m.withDO(m.DO.Having(conds...))
}

func (m methodDo) Limit(limit int) *methodDo {
	return m.withDO(m.DO.Limit(limit))
}

func (m methodDo) Offset(offset int) *methodDo {
	return m.withDO(m.DO.Offset(offset))
}

func (m methodDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *methodDo {
	return m.withDO(m.DO.Scopes(funcs...))
}

func (m methodDo) Unscoped() *methodDo {
	return m.withDO(m.DO.Unscoped())
}

func (m methodDo) Create(values ...*model.Method) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Create(values)
}

func (m methodDo) CreateInBatches(values []*model.Method, batchSize int) error {
	return m.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (m methodDo) Save(values ...*model.Method) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Save(values)
}

func (m methodDo) First() (*model.Method, error) {
	if result, err := m.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Method), nil
	}
}

func (m methodDo) Take() (*model.Method, error) {
	if result, err := m.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Method), nil
	}
}

func (m methodDo) Last() (*model.Method, error) {
	if result, err := m.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Method), nil
	}
}

func (m methodDo) Find() ([]*model.Method, error) {
	result, err := m.DO.Find()
	return result.([]*model.Method), err
}

func (m methodDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Method, err error) {
	buf := make([]*model.Method, 0, batchSize)
	err = m.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (m methodDo) FindInBatches(result *[]*model.Method, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return m.DO.FindInBatches(result, batchSize, fc)
}

func (m methodDo) Attrs(attrs ...field.AssignExpr) *methodDo {
	return m.withDO(m.DO.Attrs(attrs...))
}

func (m methodDo) Assign(attrs ...field.AssignExpr) *methodDo {
	return m.withDO(m.DO.Assign(attrs...))
}

func (m methodDo) Joins(fields ...field.RelationField) *methodDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Joins(_f))
	}
	return &m
}

func (m methodDo) Preload(fields ...field.RelationField) *methodDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Preload(_f))
	}
	return &m
}

func (m methodDo) FirstOrInit() (*model.Method, error) {
	if result, err := m.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Method), nil
	}
}

func (m methodDo) FirstOrCreate() (*model.Method, error) {
	if result, err := m.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Method), nil
	}
}

func (m methodDo) FindByPage(offset int, limit int) (result []*model.Method, count int64, err error) {
	result, err = m.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = m.Offset(-1).Limit(-1).Count()
	return
}

func (m methodDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = m.Count()
	if err != nil {
		return
	}

	err = m.Offset(offset).Limit(limit).Scan(result)
	return
}

func (m methodDo) Scan(result interface{}) (err error) {
	return m.DO.Scan(result)
}

func (m methodDo) Delete(models ...*model.Method) (result gen.ResultInfo, err error) {
	return m.DO.Delete(models)
}

func (m *methodDo) withDO(do gen.Dao) *methodDo {
	m.DO = *do.(*gen.DO)
	return m
}
