// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"

	"gorm.io/gen"

	"gorm.io/plugin/dbresolver"
)

func Use(db *gorm.DB, opts ...gen.DOOption) *Query {
	return &Query{
		db:           db,
		Bot:          newBot(db, opts...),
		BotDraft:     newBotDraft(db, opts...),
		BotPlugin:    newBotPlugin(db, opts...),
		Conversation: newConversation(db, opts...),
		Message:      newMessage(db, opts...),
		Method:       newMethod(db, opts...),
		Plugin:       newPlugin(db, opts...),
		User:         newUser(db, opts...),
	}
}

type Query struct {
	db *gorm.DB

	Bot          bot
	BotDraft     botDraft
	BotPlugin    botPlugin
	Conversation conversation
	Message      message
	Method       method
	Plugin       plugin
	User         user
}

func (q *Query) Available() bool { return q.db != nil }

func (q *Query) clone(db *gorm.DB) *Query {
	return &Query{
		db:           db,
		Bot:          q.Bot.clone(db),
		BotDraft:     q.BotDraft.clone(db),
		BotPlugin:    q.BotPlugin.clone(db),
		Conversation: q.Conversation.clone(db),
		Message:      q.Message.clone(db),
		Method:       q.Method.clone(db),
		Plugin:       q.Plugin.clone(db),
		User:         q.User.clone(db),
	}
}

func (q *Query) ReadDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Read))
}

func (q *Query) WriteDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Write))
}

func (q *Query) ReplaceDB(db *gorm.DB) *Query {
	return &Query{
		db:           db,
		Bot:          q.Bot.replaceDB(db),
		BotDraft:     q.BotDraft.replaceDB(db),
		BotPlugin:    q.BotPlugin.replaceDB(db),
		Conversation: q.Conversation.replaceDB(db),
		Message:      q.Message.replaceDB(db),
		Method:       q.Method.replaceDB(db),
		Plugin:       q.Plugin.replaceDB(db),
		User:         q.User.replaceDB(db),
	}
}

type queryCtx struct {
	Bot          *botDo
	BotDraft     *botDraftDo
	BotPlugin    *botPluginDo
	Conversation *conversationDo
	Message      *messageDo
	Method       *methodDo
	Plugin       *pluginDo
	User         *userDo
}

func (q *Query) WithContext(ctx context.Context) *queryCtx {
	return &queryCtx{
		Bot:          q.Bot.WithContext(ctx),
		BotDraft:     q.BotDraft.WithContext(ctx),
		BotPlugin:    q.BotPlugin.WithContext(ctx),
		Conversation: q.Conversation.WithContext(ctx),
		Message:      q.Message.WithContext(ctx),
		Method:       q.Method.WithContext(ctx),
		Plugin:       q.Plugin.WithContext(ctx),
		User:         q.User.WithContext(ctx),
	}
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { return fc(q.clone(tx)) }, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	tx := q.db.Begin(opts...)
	return &QueryTx{Query: q.clone(tx), Error: tx.Error}
}

type QueryTx struct {
	*Query
	Error error
}

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}
